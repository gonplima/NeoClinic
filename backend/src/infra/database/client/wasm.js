
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SecretaryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password'
};

exports.Prisma.MedicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  specialty: 'specialty'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  birthDay: 'birthDay',
  sex: 'sex',
  cpf: 'cpf',
  ethnicity: 'ethnicity',
  email: 'email'
};

exports.Prisma.ObservationScalarFieldEnum = {
  id: 'id',
  comorbidity: 'comorbidity',
  allergies: 'allergies',
  medications: 'medications',
  patientId: 'patientId'
};

exports.Prisma.ConsultationScalarFieldEnum = {
  id: 'id',
  date: 'date',
  followUp: 'followUp',
  medicId: 'medicId',
  patientId: 'patientId'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  description: 'description',
  diagnosis: 'diagnosis',
  prescription: 'prescription',
  consultationId: 'consultationId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Secretary: 'Secretary',
  Medic: 'Medic',
  Patient: 'Patient',
  Observation: 'Observation',
  Consultation: 'Consultation',
  Report: 'Report'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client_postgres",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\kaiod\\Desktop\\Computação\\TAES\\backend\\src\\infra\\database\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\kaiod\\Desktop\\Computação\\TAES\\backend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../../prisma",
  "clientVersion": "6.16.0",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "postgres"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "postgres": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client_postgres {\n  provider = \"prisma-client-js\"\n  output   = \"../src/infra/database/client\"\n}\n\ndatasource postgres {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Secretary {\n  id       String @id @default(uuid()) @map(\"_id\")\n  name     String\n  email    String @unique\n  password String\n}\n\nmodel Medic {\n  id           String         @id @default(uuid()) @map(\"_id\")\n  name         String\n  email        String         @unique\n  password     String\n  specialty    String\n  consultation Consultation[]\n}\n\nmodel Patient {\n  id           String         @id @default(uuid()) @map(\"_id\")\n  name         String\n  birthDay     DateTime\n  sex          String\n  cpf          String         @unique\n  ethnicity    String\n  email        String?        @unique\n  observation  Observation?\n  consultation Consultation[]\n}\n\nmodel Observation {\n  id          String  @id @default(uuid()) @map(\"_id\")\n  comorbidity String\n  allergies   String\n  medications String\n  patientId   String  @unique\n  patient     Patient @relation(fields: [patientId], references: [id])\n}\n\nmodel Consultation {\n  id        String   @id @default(uuid()) @map(\"_id\")\n  date      DateTime\n  Report    Report?\n  followUp  Boolean\n  medicId   String\n  patientId String\n  medic     Medic    @relation(fields: [medicId], references: [id])\n  patient   Patient  @relation(fields: [patientId], references: [id])\n}\n\nmodel Report {\n  id             String       @id @default(uuid()) @map(\"_id\")\n  description    String\n  diagnosis      String\n  prescription   String\n  consultationId String       @unique\n  consultation   Consultation @relation(fields: [consultationId], references: [id])\n}\n",
  "inlineSchemaHash": "106f73679b94f258c74ec9a15d6bbe3c71418640200a6ae38f75e1fcd3a5d235",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Secretary\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Medic\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"specialty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"consultation\",\"kind\":\"object\",\"type\":\"Consultation\",\"relationName\":\"ConsultationToMedic\"}],\"dbName\":null},\"Patient\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"birthDay\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sex\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cpf\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ethnicity\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"observation\",\"kind\":\"object\",\"type\":\"Observation\",\"relationName\":\"ObservationToPatient\"},{\"name\":\"consultation\",\"kind\":\"object\",\"type\":\"Consultation\",\"relationName\":\"ConsultationToPatient\"}],\"dbName\":null},\"Observation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"comorbidity\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"allergies\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"medications\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patient\",\"kind\":\"object\",\"type\":\"Patient\",\"relationName\":\"ObservationToPatient\"}],\"dbName\":null},\"Consultation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Report\",\"kind\":\"object\",\"type\":\"Report\",\"relationName\":\"ConsultationToReport\"},{\"name\":\"followUp\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"medicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"medic\",\"kind\":\"object\",\"type\":\"Medic\",\"relationName\":\"ConsultationToMedic\"},{\"name\":\"patient\",\"kind\":\"object\",\"type\":\"Patient\",\"relationName\":\"ConsultationToPatient\"}],\"dbName\":null},\"Report\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"diagnosis\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"prescription\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"consultationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"consultation\",\"kind\":\"object\",\"type\":\"Consultation\",\"relationName\":\"ConsultationToReport\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

